{
	"info": {
		"_postman_id": "3df1b153-b7a4-4b86-aa77-9b6dc61b5f55",
		"name": "triangle-functional-test",
		"description": "### **Integration Test for the Triangle Classification API**\n\n#### Happy Path Test:\n\nInvokes 3 times the verify triangle API to verify the triangle type. At last it fetches all the history information.\n\n#### Invalid Triangle:\n\nRetrieves the number of correctly identified triangles. Invokes the /verify API with input that does not qualify as a triangle.\n\n``` json\n{\n\"firstSide\": 1,\n\"secondSide\": 1,\n\"thirdSide\": 2\n}\n\n```\n\nVerifies that the number of records in the database stays the same.\n\n#### Invalid Parameters:\n\nTest that is similar to the previous one but instead it invokes the /verify API with the wrong time of input (one side is 0 which is not possible).\n\n``` json\n{\n    \"firstSide\": 0,\n    \"secondSide\": 1,\n    \"thirdSide\": 2\n}\n\n```\n\nAfter every request assertions are made. You can check the assertions and test results in the test Tab of each request.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "happy path",
			"item": [
				{
					"name": "Verify Triangle 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var expectedHttpStatus = 200;\r",
									"var expectedClassification = \"scalene\"\r",
									"\r",
									"pm.test(\"Status code is \" + expectedHttpStatus, function () {\r",
									"        pm.response.to.have.status(expectedHttpStatus);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"Triangle has the correct classification\", function () {\r",
									"    pm.expect(response).to.have.property(\"category\").to.eq(expectedClassification);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstSide\": 5,\r\n    \"secondSide\": 7,\r\n    \"thirdSide\": 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/triangle-api/v1/triangles/verify",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"triangle-api",
								"v1",
								"triangles",
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Triangle 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var expectedHttpStatus = 200;\r",
									"var expectedClassification = \"equilateral\"\r",
									"\r",
									"pm.test(\"Status code is \" + expectedHttpStatus, function () {\r",
									"        pm.response.to.have.status(expectedHttpStatus);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"Triangle has the correct classification\", function () {\r",
									"    pm.expect(response).to.have.property(\"category\").to.eq(expectedClassification);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstSide\": 5,\r\n    \"secondSide\": 5,\r\n    \"thirdSide\": 5\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/triangle-api/v1/triangles/verify",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"triangle-api",
								"v1",
								"triangles",
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Triangle 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var expectedHttpStatus = 200;\r",
									"var expectedClassification = \"isosceles\"\r",
									"\r",
									"pm.test(\"Status code is \" + expectedHttpStatus, function () {\r",
									"        pm.response.to.have.status(expectedHttpStatus);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"Triangle has the correct classification\", function () {\r",
									"    pm.expect(response).to.have.property(\"category\").to.eq(expectedClassification);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstSide\": 1,\r\n    \"secondSide\": 2,\r\n    \"thirdSide\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/triangle-api/v1/triangles/verify",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"triangle-api",
								"v1",
								"triangles",
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Triangle History",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"var expectedHttpStatus = 200;\r",
									"\r",
									"pm.test(\"Status code is \" + expectedHttpStatus, function () {\r",
									"        pm.response.to.have.status(expectedHttpStatus);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"var firstTriangle = response[0];\r",
									"var secondTriangle = response[1];\r",
									"var thirdTriangle = response[2];\r",
									"var firstTriangleClassification = \"scalene\";\r",
									"var secondTriangleClassification = \"equilateral\";\r",
									"var thirdTriangleClassification = \"isosceles\";\r",
									"\r",
									"pm.test(\"List has three or more elements\", function () {\r",
									"    pm.expect(response.length).to.be.above(2);\r",
									"});\r",
									"\r",
									"pm.test(\"First Triangle has the correct classification\", function () {\r",
									"    pm.expect(firstTriangle).to.have.property(\"category\").to.eq(firstTriangleClassification);\r",
									"});\r",
									"\r",
									"pm.test(\"Second Triangle has the correct classification\", function () {\r",
									"    pm.expect(secondTriangle).to.have.property(\"category\").to.eq(secondTriangleClassification);\r",
									"});\r",
									"\r",
									"pm.test(\"Third Triangle has the correct classification\", function () {\r",
									"    pm.expect(thirdTriangle).to.have.property(\"category\").to.eq(thirdTriangleClassification);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/triangle-api/v1/triangles",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"triangle-api",
								"v1",
								"triangles"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "invalid triangle",
			"item": [
				{
					"name": "Retrieve Triangle History",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"var expectedHttpStatus = 200;\r",
									"\r",
									"pm.test(\"Status code is \" + expectedHttpStatus, function () {\r",
									"        pm.response.to.have.status(expectedHttpStatus);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									" pm.environment.set(\"triangles\", response.length);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/triangle-api/v1/triangles",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"triangle-api",
								"v1",
								"triangles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Triangle",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var expectedHttpStatus = 400;\r",
									"var expectedMessage = \"Input given is not a valid triangle\";\r",
									"\r",
									"\r",
									"pm.test(\"Status code is \" + expectedHttpStatus, function () {\r",
									"        pm.response.to.have.status(expectedHttpStatus);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"Triangle is not valid\", function () {\r",
									"    pm.expect(response).to.have.property(\"message\").to.eq(expectedMessage);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstSide\": 1,\r\n    \"secondSide\": 1,\r\n    \"thirdSide\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/triangle-api/v1/triangles/verify",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"triangle-api",
								"v1",
								"triangles",
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Triangle History After Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"var expectedHttpStatus = 200;\r",
									"var triangles = pm.environment.get(\"triangles\");\r",
									"\r",
									"pm.test(\"Status code is \" + expectedHttpStatus, function () {\r",
									"        pm.response.to.have.status(expectedHttpStatus);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"Number of saved triangles is the same\", function () {\r",
									"        pm.expect(response.length).to.eq(triangles);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/triangle-api/v1/triangles",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"triangle-api",
								"v1",
								"triangles"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Invalid Parameters",
			"item": [
				{
					"name": "Retrieve Triangle History",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"var expectedHttpStatus = 200;\r",
									"\r",
									"pm.test(\"Status code is \" + expectedHttpStatus, function () {\r",
									"        pm.response.to.have.status(expectedHttpStatus);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									" pm.environment.set(\"triangles\", response.length);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/triangle-api/v1/triangles",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"triangle-api",
								"v1",
								"triangles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Triangle",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var expectedHttpStatus = 400;\r",
									"var expectedMessage = \"Request validation failed for fields\";\r",
									"\r",
									"\r",
									"pm.test(\"Status code is \" + expectedHttpStatus, function () {\r",
									"        pm.response.to.have.status(expectedHttpStatus);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"Request validation failed\", function () {\r",
									"    pm.expect(response).to.have.property(\"message\").to.include(expectedMessage);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstSide\": 0,\r\n    \"secondSide\": 1,\r\n    \"thirdSide\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/triangle-api/v1/triangles/verify",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"triangle-api",
								"v1",
								"triangles",
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Triangle History After Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"var expectedHttpStatus = 200;\r",
									"var triangles = pm.environment.get(\"triangles\");\r",
									"\r",
									"pm.test(\"Status code is \" + expectedHttpStatus, function () {\r",
									"        pm.response.to.have.status(expectedHttpStatus);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"Number of saved triangles is the same\", function () {\r",
									"        pm.expect(response.length).to.eq(triangles);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/triangle-api/v1/triangles",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"triangle-api",
								"v1",
								"triangles"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}